"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const authMiddleware_1 = require("../middleware/authMiddleware");
const listController_1 = require("../controllers/listController");
const cloud_1 = require("../config/cloud");
const router = express_1.default.Router();
//router.get('/sharing', createShareToken);
router.get('/', authMiddleware_1.protectUser, listController_1.getLists);
router.post('/', authMiddleware_1.protectUser, listController_1.addList);
router.get('/deleted', authMiddleware_1.protectUser, listController_1.getDeletedLists);
router.put('/:id', authMiddleware_1.protectUser, listController_1.changeListTitle);
router.delete('/:id/user/:userId', authMiddleware_1.protectUser, listController_1.removeUserFromList);
router.get('/:id', authMiddleware_1.protectUser, listController_1.getList);
router.post('/:id/item', authMiddleware_1.protectUser, cloud_1.upload.single('file'), listController_1.addNewItem);
router.post('/:id/item/:item', authMiddleware_1.protectUser, listController_1.addExistingItem);
router.get('/:id/item/:item/delete', authMiddleware_1.protectUser, listController_1.sendToDeleted);
router.get('/:id/item/:item/restore', authMiddleware_1.protectUser, listController_1.restoreFromDeleted);
router.get('/:id/item/:item/shop', authMiddleware_1.protectUser, listController_1.restoreFromBought);
router.get('/:id/item/:item/bought', authMiddleware_1.protectUser, listController_1.sendToBought);
router.post('/:id/bundle/:bundle', authMiddleware_1.protectUser, listController_1.addBundleItems);
router.delete('/deleteAll', authMiddleware_1.protectUser, listController_1.deleteAllListsUserDeleted);
router.delete('/:id/me', authMiddleware_1.protectUser, listController_1.deleteForMe);
router.delete('/:id/all', authMiddleware_1.protectUser, listController_1.deleteForAll);
router.get('/:id/restore', authMiddleware_1.protectUser, listController_1.restoreList);
router.delete('/:id/permanently', authMiddleware_1.protectUser, listController_1.deletePermanently);
router.get('/:token/shared', authMiddleware_1.protectUser, listController_1.getSharedList);
router.post('/:token/share', authMiddleware_1.protectUser, listController_1.shareList);
router.put('/:id/share', authMiddleware_1.protectUser, listController_1.resetListShareToken);
exports.default = router;
